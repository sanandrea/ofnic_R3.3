# PySNMP SMI module. Autogenerated from smidump -f python ETHTOOL-MIB
# by libsmi2pysnmp-0.1.3 at Tue Nov 27 19:47:01 2012,
# Python version (2, 6, 6, 'final', 0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter64, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "enterprises")
( TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention")

# Types

class EthtoolStatString(TextualConvention, OctetString):
    displayHint = "32a"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(1,32)
    

# Objects

imsco = MibIdentifier((1, 3, 6, 1, 4, 1, 39178))
project = MibIdentifier((1, 3, 6, 1, 4, 1, 39178, 100))
ethtool = ModuleIdentity((1, 3, 6, 1, 4, 1, 39178, 100, 1)).setRevisions(("2011-01-06 00:00",))
if mibBuilder.loadTexts: ethtool.setOrganization("The IMS Company")
if mibBuilder.loadTexts: ethtool.setContactInfo("bernat@luffy.cx")
if mibBuilder.loadTexts: ethtool.setDescription("This MIB module describes information gathered through ETHTOOL\nioctl for each interface available on the monitored\nsystem. Currently, only statistics are available. Information\nmay be redundant with what is available in IF-MIB, RMON-MIB,\nEtherLike-MIB and some other MIB but they are presented here\nwithout any abstraction.")
ethtoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 39178, 100, 1, 1))
if mibBuilder.loadTexts: ethtoolStatTable.setDescription("Statistics from ethtool")
ethtoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39178, 100, 1, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (1, "ETHTOOL-MIB", "ethtoolStatName"))
if mibBuilder.loadTexts: ethtoolStatEntry.setDescription("Statistic for one interface")
ethtoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 39178, 100, 1, 1, 1, 1), EthtoolStatString()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ethtoolStatName.setDescription("Name of the statistic as returned by ETHTOOL ioctl.")
ethtoolStat = MibTableColumn((1, 3, 6, 1, 4, 1, 39178, 100, 1, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethtoolStat.setDescription("Value of the statistic as returned by ETHTOOL ioctl.")
ethtoolConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 39178, 100, 1, 100))

# Augmentions

# Groups

ethtoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 39178, 100, 1, 100, 2)).setObjects(*(("ETHTOOL-MIB", "ethtoolStat"), ) )
if mibBuilder.loadTexts: ethtoolStatGroup.setDescription("Conformance groupe for ethtool statistics.")

# Compliances

ethtoolCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 39178, 100, 1, 100, 1)).setObjects(*(("ETHTOOL-MIB", "ethtoolStatGroup"), ) )
if mibBuilder.loadTexts: ethtoolCompliances.setDescription("ethtool compliance statement")

# Exports

# Module identity
mibBuilder.exportSymbols("ETHTOOL-MIB", PYSNMP_MODULE_ID=ethtool)

# Types
mibBuilder.exportSymbols("ETHTOOL-MIB", EthtoolStatString=EthtoolStatString)

# Objects
mibBuilder.exportSymbols("ETHTOOL-MIB", imsco=imsco, project=project, ethtool=ethtool, ethtoolStatTable=ethtoolStatTable, ethtoolStatEntry=ethtoolStatEntry, ethtoolStatName=ethtoolStatName, ethtoolStat=ethtoolStat, ethtoolConformance=ethtoolConformance)

# Groups
mibBuilder.exportSymbols("ETHTOOL-MIB", ethtoolStatGroup=ethtoolStatGroup)

# Compliances
mibBuilder.exportSymbols("ETHTOOL-MIB", ethtoolCompliances=ethtoolCompliances)
